"use strict"; var ApplicationConfiguration = function () { var applicationModuleName = "merlin", applicationModuleVendorDependencies = ["ngResource", "ngAnimate", "ui.router", "ngFileUpload", "ngMaterial", "ui.utils"], registerModule = function (moduleName, dependencies) { angular.module(moduleName, dependencies || []), angular.module(applicationModuleName).requires.push(moduleName) }; return { applicationModuleName: applicationModuleName, applicationModuleVendorDependencies: applicationModuleVendorDependencies, registerModule: registerModule } } (); angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies), angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider", "$httpProvider", function ($locationProvider, $httpProvider) { $locationProvider.html5Mode(!0).hashPrefix("!"), $httpProvider.interceptors.push("authInterceptor") }]), angular.module(ApplicationConfiguration.applicationModuleName).config(["$mdThemingProvider", function ($mdThemingProvider) {
  $mdThemingProvider.definePalette('amazingPaletteName', {
    '50': 'ffebee',
    '100': 'ffcdd2',
    '200': 'ef9a9a',
    '300': 'e57373',
    '400': 'ef5350',
    '500': 'f44336',
    '600': 'e53935',
    '700': 'd32f2f',
    '800': 'c62828',
    '900': '1A82E2',
    'A100': 'ff8a80',
    'A200': 'ff5252',
    'A400': 'ff1744',
    'A700': 'd50000',
    'contrastDefaultColor': 'light',    // whether, by default, text (contrast)
    // on this palette should be dark or light

    'contrastDarkColors': ['50', '100', //hues which contrast should be 'dark' by default
      '200', '300', '400', 'A100'],
    'contrastLightColors': undefined    // could also specify this if default was 'dark'
  });

  $mdThemingProvider.theme('default')
    .primaryPalette('amazingPaletteName', {
      'default': '900', // by default use shade 400 from the pink palette for primary intentions
      'hue-1': '100', // use shade 100 for the <code>md-hue-1</code> class
      'hue-2': '600', // use shade 600 for the <code>md-hue-2</code> class
      'hue-3': 'A100' // use shade A100 for the <code>md-hue-3</code> class
    })
    // If you specify less than all of the keys, it will inherit from the
    // default shades
    .accentPalette('deep-purple', {
      'default': '500' // use shade 200 for default, and keep all other shades the same
    });
}]), angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope", "$state", "Authentication", function ($rootScope, $state, Authentication) { function storePreviousState(state, params) { state.data && state.data.ignoreState || ($state.previous = { state: state, params: params, href: $state.href(state, params) }) } $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) { if (toState.data && toState.data.roles && toState.data.roles.length > 0) { var allowed = !1; toState.data.roles.forEach(function (role) { if (void 0 !== Authentication.user.roles && Authentication.user.roles.indexOf(role) !== -1) return allowed = !0, !0 }), allowed || (event.preventDefault(), void 0 !== Authentication.user && "object" == typeof Authentication.user ? $state.go("forbidden") : $state.go("authentication.signin").then(function () { storePreviousState(toState, toParams) })) } }), $rootScope.$on("$stateChangeSuccess", function (event, toState, toParams, fromState, fromParams) { storePreviousState(fromState, fromParams) }) }]), angular.element(document).ready(function () { if (window.location.hash && "#_=_" === window.location.hash) if (window.history && history.pushState) window.history.pushState("", document.title, window.location.pathname); else { var scroll = { top: document.body.scrollTop, left: document.body.scrollLeft }; window.location.hash = "", document.body.scrollTop = scroll.top, document.body.scrollLeft = scroll.left } angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]) }), function (app) { app.registerModule("autotasks") } (ApplicationConfiguration), ApplicationConfiguration.registerModule("checklists"), ApplicationConfiguration.registerModule("companies"), ApplicationConfiguration.registerModule("core"), ApplicationConfiguration.registerModule("core.admin", ["core"]), ApplicationConfiguration.registerModule("core.admin.routes", ["ui.router"]), function (app) { app.registerModule("feedbacks") } (ApplicationConfiguration), ApplicationConfiguration.registerModule("tasks"), function (app) { app.registerModule("todotasks") } (ApplicationConfiguration), ApplicationConfiguration.registerModule("usergroups"), ApplicationConfiguration.registerModule("users", ["core"]), ApplicationConfiguration.registerModule("users.admin", ["core.admin"]), ApplicationConfiguration.registerModule("users.admin.routes", ["core.admin.routes"]), angular.module("autotasks").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("autotasks", { "abstract": !0, url: "/autotasks", template: "<ui-view/>" }).state("autotasks.list", { url: "", templateUrl: "modules/autotasks/client/views/list-autotasks.client.view.html" }).state("autotasks.create", { url: "/create", templateUrl: "modules/autotasks/client/views/create-company.client.view.html", data: { roles: ["user", "admin"] } }).state("autotasks.view", { url: "/:autotaskId", templateUrl: "modules/autotasks/client/views/view-company.client.view.html" }).state("autotasks.edit", { url: "/:autotaskId/edit", templateUrl: "modules/autotasks/client/views/edit-company.client.view.html", data: { roles: ["user", "admin"] } }) }]), function () { function AutotasksController($scope, Authentication, autotask) { function remove() { confirm("Are you sure you want to delete?") && vm.autotask.$remove() } function save(isValid) { function successCallback(res) { } function errorCallback(res) { vm.error = res.data.message } return isValid ? void (vm.autotask._id ? vm.autotask.$update(successCallback, errorCallback) : vm.autotask.$save(successCallback, errorCallback)) : ($scope.$broadcast("show-errors-check-validity", "vm.form.autotaskForm"), !1) } var vm = this; vm.authentication = Authentication, vm.autotask = autotask, vm.error = null, vm.form = {}, vm.remove = remove, vm.save = save } angular.module("autotasks").controller("AutotasksController", AutotasksController), AutotasksController.$inject = ["$scope", "Authentication", "autotaskResolve"] } (), function () { function AutotasksListController(AutotasksService) { var vm = this; vm.autotasks = AutotasksService.query() } angular.module("autotasks").controller("AutotasksListController", AutotasksListController), AutotasksListController.$inject = ["AutotasksService"] } (), function () { function AutotasksService($resource) { return $resource("api/autotasks/:autotaskId", { autotaskId: "@_id" }, { update: { method: "PUT" } }) } angular.module("autotasks").factory("AutotasksService", AutotasksService), AutotasksService.$inject = ["$resource"] } (), angular.module("checklists").run(["Menus", function (Menus) { Menus.addMenuItem("topbar", { title: "Checklists", state: "checklists", type: "dropdown", roles: ["*"] }), Menus.addSubMenuItem("topbar", "checklists", { title: "List checklists", state: "checklists.list" }), Menus.addSubMenuItem("topbar", "checklists", { title: "Create checklists", state: "checklists.create", roles: ["user"] }) }]), angular.module("checklists").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("checklists", { "abstract": !0, url: "/checklists", template: "<ui-view/>" }).state("checklists.list", { url: "", templateUrl: "modules/checklists/client/views/list-checklists.client.view.html" }).state("checklists.create", { url: "/create", templateUrl: "modules/checklists/client/views/create-checklist.client.view.html", data: { roles: ["user", "admin"] } }).state("checklists.view", { url: "/:checklistId", templateUrl: "modules/checklists/client/views/view-checklist.client.view.html" }).state("checklists.edit", { url: "/:checklistId/edit", templateUrl: "modules/articles/client/views/edit-checklist.client.view.html", data: { roles: ["user", "admin"] } }) }]), angular.module("checklists").controller("ChecklistsController", ["$scope", "$stateParams", "$location", "Authentication", "Checklists", function ($scope, $stateParams, $location, Authentication, Checklists) { $scope.authentication = Authentication, $scope.items = [], $scope.create = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "checklistForm"), !1; var checklist = new Checklists({ title: this.title, content: this.content }); checklist.$save(function (response) { $location.path("checklists/" + response[0].id), $scope.title = "", $scope.content = "" }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.remove = function (checklist) { if (checklist) { checklist.$remove(); for (var i in $scope.checklists) $scope.checklists[i] === checklist && $scope.checklists.splice(i, 1) } else $scope.checklist.$remove(function () { $location.path("checklists") }) }, $scope.addItem = function () { $scope.items.push({ type: "YN" }) }, $scope.update = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "checklistForm"), !1; var checklist = $scope.checklist; checklist.$update(function () { $location.path("checklists/" + checklist._id) }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.find = function () { console.log("Finding..."), $scope.checklists = Checklists.query() }, $scope.findOne = function () { $scope.checklist = Checklists.get({ checklistId: $stateParams.checklistId }) } }]), angular.module("checklists").factory("Checklists", ["$resource", function ($resource) { return $resource("api/checklists/:articleId", { articleId: "@_id" }, { update: { method: "PUT" } }) }]), angular.module("companies").run(["Menus", function (Menus) { Menus.addMenuItem("topbar", { title: "Companies", state: "companies", type: "dropdown", roles: ["*"] }), Menus.addSubMenuItem("topbar", "companies", { title: "List Companies", state: "companies.list" }), Menus.addSubMenuItem("topbar", "companies", { title: "Create Companies", state: "companies.create", roles: ["user"] }) }]), angular.module("companies").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("companies", { "abstract": !0, url: "/companies", template: "<ui-view/>" }).state("companies.list", { url: "", templateUrl: "modules/companies/client/views/list-companies.client.view.html" }).state("companies.create", { url: "/create", templateUrl: "modules/companies/client/views/create-company.client.view.html", data: { roles: ["user", "admin"] } }).state("companies.view", { url: "/:companyId", templateUrl: "modules/companies/client/views/view-company.client.view.html" }).state("companies.edit", { url: "/:companyId/edit", templateUrl: "modules/companies/client/views/edit-company.client.view.html", data: { roles: ["user", "admin"] } }) }]), angular.module("companies").controller("CompaniesController", ["$scope", "$stateParams", "$location", "Authentication", "Companies", function ($scope, $stateParams, $location, Authentication, Companies) { $scope.authentication = Authentication, $scope.create = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "companyForm"), !1; var company = new Companies({ title: this.title, content: this.content }); company.$save(function (response) { $location.path("companies/" + response._id), $scope.title = "", $scope.content = "" }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.remove = function (company) { if (company) { company.$remove(); for (var i in $scope.companies) $scope.companies[i] === company && $scope.companies.splice(i, 1) } else $scope.company.$remove(function () { $location.path("companies") }) }, $scope.update = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "companyForm"), !1; var company = $scope.company; company.$update(function () { $location.path("companies/" + company._id) }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.find = function () { $scope.companies = Companies.query() }, $scope.findOne = function () { $scope.company = Companies.get({ companyId: $stateParams.companyId }) } }]), angular.module("companies").factory("Companies", ["$resource", function ($resource) { return $resource("api/companies/:companyId", { companyId: "@_id" }, { update: { method: "PUT" } }) }]), angular.module("core.admin").run(["Menus", function (Menus) { Menus.addMenuItem("topbar", { title: "Admin", state: "admin", type: "dropdown", roles: ["admin"] }) }]), angular.module("core.admin.routes").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("admin", { "abstract": !0, url: "/admin", template: "<ui-view/>", data: { roles: ["admin"] } }) }]), angular.module("core").config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) { $urlRouterProvider.otherwise(function ($injector, $location) { $injector.get("$state").transitionTo("not-found", null, { location: !1 }) }), $stateProvider.state("home", { url: "/", templateUrl: "modules/core/client/views/home.client.view.html" }).state("notavailable", { url: "/notavailable", templateUrl: "modules/core/client/views/notavailable.client.view.html" }).state("not-found", { url: "/not-found", templateUrl: "modules/core/client/views/404.client.view.html", data: { ignoreState: !0 } }).state("outsourcing", { url: "/outsourcing.html", templateUrl: "modules/core/client/views/outsourcing.client.view.html", data: { ignoreState: true } }).state("bad-request", { url: "/bad-request", templateUrl: "modules/core/client/views/400.client.view.html", data: { ignoreState: !0 } }).state("forbidden", { url: "/forbidden", templateUrl: "modules/core/client/views/403.client.view.html", data: { ignoreState: !0 } }) }]), angular.module("core").controller("HeaderController", ["$scope", "$rootScope", "$state", "Authentication", "Menus", "$mdSidenav", function ($scope, $rootScope, $state, Authentication, Menus, $mdSidenav) { $scope.$state = $state, $scope.authentication = Authentication, $scope.menu = Menus.getMenu("topbar"), $scope.isCollapsed = !1, $scope.toggleCollapsibleMenu = function () { $scope.isCollapsed = !$scope.isCollapsed }, $scope.$on("$stateChangeSuccess", function () { $scope.isCollapsed = !1 }), $scope.openMenu = function ($mdOpenMenu, ev) { $mdOpenMenu(ev) }, $rootScope.showNav = !0, $scope.toggleSidenav = function () { var nav = $mdSidenav("left"); nav.toggle() } }]), angular.module("core").controller("HomeController", ["$scope", "Authentication", function ($scope, Authentication) { $scope.authentication = Authentication }]), angular.module("core").controller("SideNavController", ["$scope", "$rootScope", "$state", "Authentication", "Menus", "$mdSidenav", function ($scope, $rootScope, $state, Authentication, Menus, $mdSidenav) { $scope.$state = $state, $scope.authentication = Authentication, $scope.showNav = function () { return $rootScope.showNav }, $scope.focusSection = function () { var nav = $mdSidenav("left"); nav.toggle() } }]), angular.module("core").directive("showErrors", ["$timeout", "$interpolate", function ($timeout, $interpolate) { var linkFn = function (scope, el, attrs, formCtrl) { var inputEl, inputName, inputNgEl, options, showSuccess, toggleClasses, initCheck = !1, showValidationMessages = !1; if (options = scope.$eval(attrs.showErrors) || {}, showSuccess = options.showSuccess || !1, inputEl = el[0].querySelector(".form-control[name]") || el[0].querySelector("[name]"), inputNgEl = angular.element(inputEl), inputName = $interpolate(inputNgEl.attr("name") || "")(scope), !inputName) throw "show-errors element has no child input elements with a 'name' attribute class"; var reset = function () { return $timeout(function () { el.removeClass("has-error"), el.removeClass("has-success"), showValidationMessages = !1 }, 0, !1) }; scope.$watch(function () { return formCtrl[inputName] && formCtrl[inputName].$invalid }, function (invalid) { return toggleClasses(invalid) }), scope.$on("show-errors-check-validity", function (event, name) { if (angular.isUndefined(name) || formCtrl.$name === name) return initCheck = !0, showValidationMessages = !0, toggleClasses(formCtrl[inputName].$invalid) }), scope.$on("show-errors-reset", function (event, name) { if (angular.isUndefined(name) || formCtrl.$name === name) return reset() }), toggleClasses = function (invalid) { if (el.toggleClass("has-error", showValidationMessages && invalid), showSuccess) return el.toggleClass("has-success", showValidationMessages && !invalid) } }; return { restrict: "A", require: "^form", compile: function (elem, attrs) { if (attrs.showErrors.indexOf("skipFormGroupCheck") === -1 && !elem.hasClass("form-group") && !elem.hasClass("input-group")) throw "show-errors element does not have the 'form-group' or 'input-group' class"; return linkFn } } }]), angular.module("core").factory("authInterceptor", ["$q", "$injector", function ($q, $injector) { return { responseError: function (rejection) { if (!rejection.config.ignoreAuthModule) switch (rejection.status) { case 401: $injector.get("$state").transitionTo("authentication.signin"); break; case 403: $injector.get("$state").transitionTo("forbidden") }return $q.reject(rejection) } } }]), angular.module("core").service("Menus", [function () { this.defaultRoles = ["user", "admin"], this.menus = {}; var shouldRender = function (user) { if (~this.roles.indexOf("*")) return !0; if (!user) return !1; for (var userRoleIndex in user.roles) for (var roleIndex in this.roles) if (this.roles[roleIndex] === user.roles[userRoleIndex]) return !0; return !1 }; this.validateMenuExistance = function (menuId) { if (menuId && menuId.length) { if (this.menus[menuId]) return !0; throw new Error("Menu does not exist") } throw new Error("MenuId was not provided") }, this.getMenu = function (menuId) { return this.validateMenuExistance(menuId), this.menus[menuId] }, this.addMenu = function (menuId, options) { return options = options || {}, this.menus[menuId] = { roles: options.roles || this.defaultRoles, items: options.items || [], shouldRender: shouldRender }, this.menus[menuId] }, this.removeMenu = function (menuId) { this.validateMenuExistance(menuId), delete this.menus[menuId] }, this.addMenuItem = function (menuId, options) { if (options = options || {}, this.validateMenuExistance(menuId), this.menus[menuId].items.push({ title: options.title || "", state: options.state || "", type: options.type || "item", "class": options["class"], roles: null === options.roles || "undefined" == typeof options.roles ? this.defaultRoles : options.roles, position: options.position || 0, items: [], shouldRender: shouldRender }), options.items) for (var i in options.items) this.addSubMenuItem(menuId, options.state, options.items[i]); return this.menus[menuId] }, this.addSubMenuItem = function (menuId, parentItemState, options) { options = options || {}, this.validateMenuExistance(menuId); for (var itemIndex in this.menus[menuId].items) this.menus[menuId].items[itemIndex].state === parentItemState && this.menus[menuId].items[itemIndex].items.push({ title: options.title || "", state: options.state || "", roles: null === options.roles || "undefined" == typeof options.roles ? this.menus[menuId].items[itemIndex].roles : options.roles, position: options.position || 0, shouldRender: shouldRender }); return this.menus[menuId] }, this.removeMenuItem = function (menuId, menuItemState) { this.validateMenuExistance(menuId); for (var itemIndex in this.menus[menuId].items) this.menus[menuId].items[itemIndex].state === menuItemState && this.menus[menuId].items.splice(itemIndex, 1); return this.menus[menuId] }, this.removeSubMenuItem = function (menuId, submenuItemState) { this.validateMenuExistance(menuId); for (var itemIndex in this.menus[menuId].items) for (var subitemIndex in this.menus[menuId].items[itemIndex].items) this.menus[menuId].items[itemIndex].items[subitemIndex].state === submenuItemState && this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1); return this.menus[menuId] }, this.addMenu("topbar", { roles: ["*"] }) }]), angular.module("core").service("Socket", ["Authentication", "$state", "$timeout", function (Authentication, $state, $timeout) { this.connect = function () { Authentication.user && (this.socket = io()) }, this.connect(), this.on = function (eventName, callback) { this.socket && this.socket.on(eventName, function (data) { $timeout(function () { callback(data) }) }) }, this.emit = function (eventName, data) { this.socket && this.socket.emit(eventName, data) }, this.removeListener = function (eventName) { this.socket && this.socket.removeListener(eventName) } }]), function () { function routeConfig($stateProvider) { $stateProvider.state("feedbacks", { "abstract": !0, url: "/feedbacks", template: "<ui-view/>" }).state("feedbacks.list", { url: "", templateUrl: "modules/feedbacks/client/views/list-feedbacks.client.view.html", controller: "FeedbacksListController", controllerAs: "vm", data: { pageTitle: "Feedbacks List" } }).state("feedbacks.create", { url: "/create", templateUrl: "modules/feedbacks/client/views/form-feedback.client.view.html", controller: "FeedbacksController", controllerAs: "vm", resolve: { feedbackResolve: newFeedback }, data: { roles: ["user", "admin"], pageTitle: "Feedbacks Create" } }).state("feedbacks.edit", { url: "/:feedbackId/edit", templateUrl: "modules/feedbacks/client/views/form-feedback.client.view.html", controller: "FeedbacksController", controllerAs: "vm", resolve: { feedbackResolve: getFeedback }, data: { roles: ["user", "admin"], pageTitle: "Edit Feedback {{ feedbackResolve.name }}" } }).state("feedbacks.view", { url: "/:feedbackId", templateUrl: "modules/feedbacks/client/views/view-feedback.client.view.html", controller: "FeedbacksController", controllerAs: "vm", resolve: { feedbackResolve: getFeedback }, data: { pageTitle: "Feedback {{ articleResolve.name }}" } }) } function getFeedback($stateParams, FeedbacksService) { return FeedbacksService.get({ feedbackId: $stateParams.feedbackId }).$promise } function newFeedback(FeedbacksService) { return new FeedbacksService } angular.module("feedbacks").config(routeConfig), routeConfig.$inject = ["$stateProvider"], getFeedback.$inject = ["$stateParams", "FeedbacksService"], newFeedback.$inject = ["FeedbacksService"] } (), function () { function FeedbacksController($scope, $state, Authentication, feedback) { function remove() { confirm("Are you sure you want to delete?") && vm.feedback.$remove($state.go("feedbacks.list")) } function save(isValid) { function successCallback(res) { $state.go("feedbacks.view", { feedbackId: res._id }) } function errorCallback(res) { vm.error = res.data.message } return isValid ? void (vm.feedback._id ? vm.feedback.$update(successCallback, errorCallback) : vm.feedback.$save(successCallback, errorCallback)) : ($scope.$broadcast("show-errors-check-validity", "vm.form.feedbackForm"), !1) } var vm = this; vm.authentication = Authentication, vm.feedback = feedback, vm.error = null, vm.form = {}, vm.remove = remove, vm.save = save } angular.module("feedbacks").controller("FeedbacksController", FeedbacksController), FeedbacksController.$inject = ["$scope", "$state", "Authentication", "feedbackResolve"] } (), function () { function FeedbacksListController(FeedbacksService) { var vm = this; vm.feedbacks = FeedbacksService.query() } angular.module("feedbacks").controller("FeedbacksListController", FeedbacksListController), FeedbacksListController.$inject = ["FeedbacksService"] } (), function () { function FeedbacksService($resource) { return $resource("api/feedbacks/:feedbackId", { feedbackId: "@_id" }, { update: { method: "PUT" } }) } angular.module("feedbacks").factory("FeedbacksService", FeedbacksService), FeedbacksService.$inject = ["$resource"] } (), angular.module("tasks").run(["Menus", function (Menus) { Menus.addMenuItem("topbar", { title: "Tasks", state: "tasks", type: "dropdown", roles: ["*"] }), Menus.addSubMenuItem("topbar", "tasks", { title: "List tasks", state: "tasks.list" }), Menus.addSubMenuItem("topbar", "tasks", { title: "Create tasks", state: "tasks.create", roles: ["user"] }) }]), angular.module("tasks").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("tasks", { "abstract": !0, url: "/tasks", template: "<ui-view/>" }).state("tasks.list", { url: "", templateUrl: "modules/tasks/client/views/list-tasks.client.view.html" }).state("tasks.create", { url: "/create", templateUrl: "modules/tasks/client/views/create-task.client.view.html", data: { roles: ["user", "admin"] } }).state("tasks.view", { url: "/:taskId", templateUrl: "modules/tasks/client/views/view-task.client.view.html" }).state("tasks.edit", { url: "/:taskId/edit", templateUrl: "modules/tasks/client/views/edit-task.client.view.html", data: { roles: ["user", "admin"] } }) }]), angular.module("tasks").controller("TasksController", ["$scope", "$stateParams", "$location", "Authentication", "Tasks", function ($scope, $stateParams, $location, Authentication, Tasks) { $scope.authentication = Authentication, $scope.create = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "taskForm"), !1; var task = new Tasks({ title: this.title, content: this.content }); task.$save(function (response) { $location.path("tasks/" + response._id), $scope.title = "", $scope.content = "" }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.remove = function (task) { if (task) { task.$remove(); for (var i in $scope.tasks) $scope.tasks[i] === task && $scope.tasks.splice(i, 1) } else $scope.task.$remove(function () { $location.path("tasks") }) }, $scope.update = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "taskForm"), !1; var task = $scope.task; task.$update(function () { $location.path("tasks/" + task._id) }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.find = function () { $scope.tasks = Tasks.query() }, $scope.findOne = function () { $scope.task = Tasks.get({ taskId: $stateParams.taskId }) } }]), angular.module("tasks").factory("Tasks", ["$resource", function ($resource) { return $resource("api/tasks/:taskId", { taskId: "@_id" }, { update: { method: "PUT" } }) }]), function () { function routeConfig($stateProvider) { $stateProvider.state("todotasks", { "abstract": !0, url: "/todotasks", template: "<ui-view/>" }).state("todotasks.list", { url: "", templateUrl: "modules/todotasks/client/views/list-todotasks.client.view.html", controller: "TodotasksListController", controllerAs: "vm", data: { pageTitle: "todotasks List" } }).state("todotasks.create", { url: "/create", templateUrl: "modules/todotasks/client/views/form-todotask.client.view.html", controller: "TodotasksController", controllerAs: "vm", resolve: { todotaskResolve: newTodotask }, data: { roles: ["user", "admin"], pageTitle: "todotasks Create" } }).state("todotasks.edit", { url: "/:todotaskId/edit", templateUrl: "modules/todotasks/client/views/form-todotask.client.view.html", controller: "TodotaskController", controllerAs: "vm", resolve: { todotaskResolve: getTodotask }, data: { roles: ["user", "admin"], pageTitle: "Edit Todotask {{ todotaskResolve.name }}" } }).state("todotasks.view", { url: "/:todotaskId", templateUrl: "modules/todotasks/client/views/view-todotask.client.view.html", controller: "TodotasksController", controllerAs: "vm", resolve: { todotaskResolve: getTodotask }, data: { pageTitle: "Todotask {{ todotaskResolve.name }}" } }) } function getTodotask($stateParams, TodotasksService) { return TodotasksService.get({ todotaskId: $stateParams.todotaskId }).$promise } function newTodotask(TodotasksService) { return new TodotasksService } angular.module("todotasks").config(routeConfig), routeConfig.$inject = ["$stateProvider"], getTodotask.$inject = ["$stateParams", "TodotasksService"], newTodotask.$inject = ["TodotasksService"] } (), function () { function TodotasksListController(TodotasksService) { var vm = this; vm.todotasks = TodotasksService.query() } angular.module("todotasks").controller("TodotasksListController", TodotasksListController), TodotasksListController.$inject = ["TodotasksService"] } (), function () { function TodotasksController($scope, Authentication, todotask) { function remove() { confirm("Are you sure you want to delete?") && vm.todotask.$remove() } function save(isValid) { function successCallback(res) { } function errorCallback(res) { vm.error = res.data.message } return isValid ? void (vm.todotask._id ? vm.todotask.$update(successCallback, errorCallback) : vm.todotask.$save(successCallback, errorCallback)) : ($scope.$broadcast("show-errors-check-validity", "vm.form.todotaskForm"), !1) } var vm = this; vm.authentication = Authentication, vm.todotask = todotask, vm.error = null, vm.form = {}, vm.remove = remove, vm.save = save } angular.module("todotasks").controller("TodotasksController", TodotasksController), TodotasksController.$inject = ["$scope", "Authentication", "todotaskResolve"] } (), function () { function TodotasksService($resource) { return $resource("api/todotasks/:todotaskId", { todotaskId: "@_id" }, { update: { method: "PUT" } }) } angular.module("todotasks").factory("TodotasksService", TodotasksService), TodotasksService.$inject = ["$resource"] } (), angular.module("usergroups").run(["Menus", function (Menus) { Menus.addMenuItem("topbar", { title: "usergroups", state: "usergroups", type: "dropdown", roles: ["*"] }), Menus.addSubMenuItem("topbar", "usergroups", { title: "List usergroups", state: "usergroups.list" }), Menus.addSubMenuItem("topbar", "usergroups", { title: "Create usergroups", state: "usergroups.create", roles: ["user"] }) }]), angular.module("usergroups").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("usergroups", { "abstract": !0, url: "/usergroups", template: "<ui-view/>" }).state("usergroups.list", { url: "", templateUrl: "modules/usergroups/client/views/list-usergroups.client.view.html" }).state("usergroups.create", { url: "/create", templateUrl: "modules/usergroups/client/views/create-usergroup.client.view.html", data: { roles: ["user", "admin"] } }).state("usergroups.view", { url: "/:usergroupId", templateUrl: "modules/usergroups/client/views/view-usergroup.client.view.html" }).state("usergroups.edit", { url: "/:usergroupId/edit", templateUrl: "modules/usergroups/client/views/edit-usergroup.client.view.html", data: { roles: ["user", "admin"] } }) }]), angular.module("usergroups").controller("UsergroupsController", ["$scope", "$stateParams", "$location", "Authentication", "Usergroups", function ($scope, $stateParams, $location, Authentication, Usergroups) { $scope.authentication = Authentication, $scope.create = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "usergroupForm"), !1; var usergroup = new Usergroups({ title: this.title, content: this.content }); usergroup.$save(function (response) { $location.path("usergroups/" + response._id), $scope.title = "", $scope.content = "" }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.remove = function (usergroup) { if (usergroup) { usergroup.$remove(); for (var i in $scope.usergroups) $scope.usergroups[i] === usergroup && $scope.usergroups.splice(i, 1) } else $scope.usergroup.$remove(function () { $location.path("usergroups") }) }, $scope.update = function (isValid) { if ($scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "usergroupForm"), !1; var usergroup = $scope.usergroup; usergroup.$update(function () { $location.path("usergroups/" + usergroup._id) }, function (errorResponse) { $scope.error = errorResponse.data.message }) }, $scope.find = function () { $scope.usergroups = Usergroups.query() }, $scope.findOne = function () { $scope.usergroup = Usergroups.get({ usergroupId: $stateParams.usergroupId }) } }]), angular.module("usergroups").factory("Usergroups", ["$resource", function ($resource) { return $resource("api/usergroup/:usergroupId", { usergroupId: "@_id" }, { update: { method: "PUT" } }) }]), angular.module("users.admin").run(["Menus", function (Menus) { Menus.addSubMenuItem("topbar", "admin", { title: "Manage Users", state: "admin.users" }) }]), angular.module("users.admin.routes").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("admin.users", { url: "/users", templateUrl: "modules/users/client/views/admin/list-users.client.view.html", controller: "UserListController" }).state("admin.user", { url: "/users/:userId", templateUrl: "modules/users/client/views/admin/view-user.client.view.html", controller: "UserController", resolve: { userResolve: ["$stateParams", "Admin", function ($stateParams, Admin) { return Admin.get({ userId: $stateParams.userId }) }] } }).state("admin.user-edit", { url: "/users/:userId/edit", templateUrl: "modules/users/client/views/admin/edit-user.client.view.html", controller: "UserController", resolve: { userResolve: ["$stateParams", "Admin", function ($stateParams, Admin) { return Admin.get({ userId: $stateParams.userId }) }] } }) }]), angular.module("users").config(["$httpProvider", function ($httpProvider) { $httpProvider.interceptors.push(["$q", "$location", "Authentication", function ($q, $location, Authentication) { return { responseError: function (rejection) { switch (rejection.status) { case 401: Authentication.user = null, $location.path("signin"); break; case 403: }return $q.reject(rejection) } } }]) }]), angular.module("users").config(["$stateProvider", function ($stateProvider) { $stateProvider.state("settings", { "abstract": !0, url: "/settings", templateUrl: "modules/users/client/views/settings/settings.client.view.html", data: { roles: ["user", "admin"] } }).state("settings.profile", { url: "/profile", templateUrl: "modules/users/client/views/settings/edit-profile.client.view.html" }).state("settings.password", { url: "/password", templateUrl: "modules/users/client/views/settings/change-password.client.view.html" }).state("settings.accounts", { url: "/accounts", templateUrl: "modules/users/client/views/settings/manage-social-accounts.client.view.html" }).state("settings.picture", { url: "/picture", templateUrl: "modules/users/client/views/settings/change-profile-picture.client.view.html" }).state("authentication", { "abstract": !0, url: "/authentication", templateUrl: "modules/users/client/views/authentication/authentication.client.view.html" }).state("authentication.signup", { url: "/signup", templateUrl: "modules/users/client/views/authentication/signup.client.view.html" }).state("authentication.signin", { url: "/signin?err", templateUrl: "modules/users/client/views/authentication/signin.client.view.html" }).state("password", { "abstract": !0, url: "/password", template: "<ui-view/>" }).state("password.forgot", { url: "/forgot", templateUrl: "modules/users/client/views/password/forgot-password.client.view.html" }).state("password.reset", { "abstract": !0, url: "/reset", template: "<ui-view/>" }).state("password.reset.invalid", { url: "/invalid", templateUrl: "modules/users/client/views/password/reset-password-invalid.client.view.html" }).state("password.reset.success", { url: "/success", templateUrl: "modules/users/client/views/password/reset-password-success.client.view.html" }).state("password.reset.form", { url: "/:token", templateUrl: "modules/users/client/views/password/reset-password.client.view.html" }) }]), angular.module("users.admin").controller("UserListController", ["$scope", "$filter", "Admin", function ($scope, $filter, Admin) {
  Admin.query(function (data) { $scope.users = data, $scope.buildPager() }),
  $scope.buildPager = function () { $scope.pagedItems = [], $scope.itemsPerPage = 15, $scope.currentPage = 1, $scope.figureOutItemsToDisplay() }, $scope.figureOutItemsToDisplay = function () { $scope.filteredItems = $filter("filter")($scope.users, { $: $scope.search }), $scope.filterLength = $scope.filteredItems.length; var begin = ($scope.currentPage - 1) * $scope.itemsPerPage, end = begin + $scope.itemsPerPage; $scope.pagedItems = $scope.filteredItems.slice(begin, end) }, $scope.pageChanged = function () { $scope.figureOutItemsToDisplay() }
}]), angular.module("users.admin").controller("UserController", ["$scope", "$state", "Authentication", "userResolve", function ($scope, $state, Authentication, userResolve) { $scope.authentication = Authentication, $scope.user = userResolve, $scope.remove = function (user) { confirm("Are you sure you want to delete this user?") && (user ? (user.$remove(), $scope.users.splice($scope.users.indexOf(user), 1)) : $scope.user.$remove(function () { $state.go("admin.users") })) }, $scope.update = function (isValid) { if (!isValid) return $scope.$broadcast("show-errors-check-validity", "userForm"), !1; var user = $scope.user; user.$update(function () { $state.go("admin.user", { userId: user._id }) }, function (errorResponse) { $scope.error = errorResponse.data.message }) } }]), angular.module("users").controller("AuthenticationController", ["$scope", "$state", "$http", "$location", "$window", "Authentication", "PasswordValidator", function ($scope, $state, $http, $location, $window, Authentication, PasswordValidator) { $scope.authentication = Authentication, $scope.popoverMsg = PasswordValidator.getPopoverMsg(), $scope.error = $location.search().err, $scope.authentication.user && $location.path("/"), $scope.signup = function (isValid) { return $scope.error = null, isValid ? void $http.post("/api/auth/signup", $scope.credentials).success(function (response) { $scope.authentication.user = response, $state.go($state.previous.state.name || "home", $state.previous.params) }).error(function (response) { $scope.error = response.message }) : ($scope.$broadcast("show-errors-check-validity", "userForm"), !1) }, $scope.signin = function (isValid) { return $scope.error = null, isValid ? void $http.post("/api/auth/signin", $scope.credentials).success(function (response) { $scope.authentication.user = response, $state.go($state.previous.state.name || "home", $state.previous.params) }).error(function (response) { $scope.error = response.message }) : ($scope.$broadcast("show-errors-check-validity", "userForm"), !1) }, $scope.callOauthProvider = function (url) { $state.previous && $state.previous.href && (url += "?redirect_to=" + encodeURIComponent($state.previous.href)), $window.location.href = url } }]), angular.module("users").controller("PasswordController", ["$scope", "$stateParams", "$http", "$location", "Authentication", "PasswordValidator", function ($scope, $stateParams, $http, $location, Authentication, PasswordValidator) { $scope.authentication = Authentication, $scope.popoverMsg = PasswordValidator.getPopoverMsg(), $scope.authentication.user && $location.path("/"), $scope.askForPasswordReset = function (isValid) { return $scope.success = $scope.error = null, isValid ? void $http.post("/api/auth/forgot", $scope.credentials).success(function (response) { $scope.credentials = null, $scope.success = response.message }).error(function (response) { $scope.credentials = null, $scope.error = response.message }) : ($scope.$broadcast("show-errors-check-validity", "forgotPasswordForm"), !1) }, $scope.resetUserPassword = function (isValid) { return $scope.success = $scope.error = null, isValid ? void $http.post("/api/auth/reset/" + $stateParams.token, $scope.passwordDetails).success(function (response) { $scope.passwordDetails = null, Authentication.user = response, $location.path("/password/reset/success") }).error(function (response) { $scope.error = response.message }) : ($scope.$broadcast("show-errors-check-validity", "resetPasswordForm"), !1) } }]), angular.module("users").controller("ChangePasswordController", ["$scope", "$http", "Authentication", "PasswordValidator", function ($scope, $http, Authentication, PasswordValidator) { $scope.user = Authentication.user, $scope.popoverMsg = PasswordValidator.getPopoverMsg(), $scope.changeUserPassword = function (isValid) { return $scope.success = $scope.error = null, isValid ? void $http.post("/api/users/password", $scope.passwordDetails).success(function (response) { $scope.$broadcast("show-errors-reset", "passwordForm"), $scope.success = !0, $scope.passwordDetails = null }).error(function (response) { $scope.error = response.message }) : ($scope.$broadcast("show-errors-check-validity", "passwordForm"), !1) } }]), angular.module("users").controller("ChangeProfilePictureController", ["$scope", "$timeout", "$window", "Authentication", "FileUploader", function ($scope, $timeout, $window, Authentication, FileUploader) { $scope.user = Authentication.user, $scope.imageURL = $scope.user.profileImageURL, $scope.uploader = new FileUploader({ url: "api/users/picture", alias: "newProfilePicture" }), $scope.uploader.filters.push({ name: "imageFilter", fn: function (item, options) { var type = "|" + item.type.slice(item.type.lastIndexOf("/") + 1) + "|"; return "|jpg|png|jpeg|bmp|gif|".indexOf(type) !== -1 } }), $scope.uploader.onAfterAddingFile = function (fileItem) { if ($window.FileReader) { var fileReader = new FileReader; fileReader.readAsDataURL(fileItem._file), fileReader.onload = function (fileReaderEvent) { $timeout(function () { $scope.imageURL = fileReaderEvent.target.result }, 0) } } }, $scope.uploader.onSuccessItem = function (fileItem, response, status, headers) { $scope.success = !0, $scope.user = Authentication.user = response, $scope.cancelUpload() }, $scope.uploader.onErrorItem = function (fileItem, response, status, headers) { $scope.cancelUpload(), $scope.error = response.message }, $scope.uploadProfilePicture = function () { $scope.success = $scope.error = null, $scope.uploader.uploadAll() }, $scope.cancelUpload = function () { $scope.uploader.clearQueue(), $scope.imageURL = $scope.user.profileImageURL } }]), angular.module("users").controller("EditProfileController", ["$scope", "$http", "$location", "Users", "Authentication", function ($scope, $http, $location, Users, Authentication) { $scope.user = Authentication.user, $scope.updateUserProfile = function (isValid) { if ($scope.success = $scope.error = null, !isValid) return $scope.$broadcast("show-errors-check-validity", "userForm"), !1; var user = new Users($scope.user); user.$update(function (response) { $scope.$broadcast("show-errors-reset", "userForm"), $scope.success = !0, Authentication.user = response }, function (response) { $scope.error = response.data.message }) } }]), angular.module("users").controller("SocialAccountsController", ["$scope", "$http", "Authentication", function ($scope, $http, Authentication) { $scope.user = Authentication.user, $scope.hasConnectedAdditionalSocialAccounts = function (provider) { for (var i in $scope.user.additionalProvidersData) return !0; return !1 }, $scope.isConnectedSocialAccount = function (provider) { return $scope.user.provider === provider || $scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider] }, $scope.removeUserSocialAccount = function (provider) { $scope.success = $scope.error = null, $http["delete"]("/api/users/accounts", { params: { provider: provider } }).success(function (response) { $scope.success = !0, $scope.user = Authentication.user = response }).error(function (response) { $scope.error = response.message }) } }]), angular.module("users").controller("SettingsController", ["$scope", "Authentication", function ($scope, Authentication) { $scope.user = Authentication.user }]), angular.module("users").directive("passwordValidator", ["PasswordValidator", function (PasswordValidator) { return { require: "ngModel", link: function (scope, element, attrs, ngModel) { ngModel.$validators.requirements = function (password) { var status = !0; if (password) { var result = PasswordValidator.getResult(password), requirementsIdx = 0, requirementsMeter = [{ color: "danger", progress: "20" }, { color: "warning", progress: "40" }, { color: "info", progress: "60" }, { color: "primary", progress: "80" }, { color: "success", progress: "100" }]; result.errors.length < requirementsMeter.length && (requirementsIdx = requirementsMeter.length - result.errors.length - 1), scope.requirementsColor = requirementsMeter[requirementsIdx].color, scope.requirementsProgress = requirementsMeter[requirementsIdx].progress, result.errors.length ? (scope.popoverMsg = PasswordValidator.getPopoverMsg(), scope.passwordErrors = result.errors, status = !1) : (scope.popoverMsg = "", scope.passwordErrors = [], status = !0) } return status } } } }]), angular.module("users").directive("passwordVerify", [function () { return { require: "ngModel", scope: { passwordVerify: "=" }, link: function (scope, element, attrs, ngModel) { scope.$watch(function () { var combined; return (scope.passwordVerify || ngModel) && (combined = scope.passwordVerify + "_" + ngModel), combined }, function (value) { value && (ngModel.$validators.passwordVerify = function (password) { var origin = scope.passwordVerify; return origin === password }) }) } } }]), angular.module("users").directive("lowercase", function () { return { require: "ngModel", link: function (scope, element, attrs, modelCtrl) { modelCtrl.$parsers.push(function (input) { return input ? input.toLowerCase() : "" }), element.css("text-transform", "lowercase") } } }), angular.module("users").factory("Authentication", ["$window", function ($window) { var auth = { user: $window.user }; return auth }]), angular.module("users").factory("PasswordValidator", ["$window", function ($window) { var owaspPasswordStrengthTest = $window.owaspPasswordStrengthTest; return { getResult: function (password) { var result = owaspPasswordStrengthTest.test(password); return result }, getPopoverMsg: function () { var popoverMsg = "Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters."; return popoverMsg } } }]), angular.module("users").factory("Users", ["$resource", function ($resource) { return $resource("api/users", {}, { update: { method: "PUT" } }) }]), angular.module("users.admin").factory("Admin", ["$resource", function ($resource) { return $resource("api/users/:userId", { userId: "@_id" }, { update: { method: "PUT" } }) }]);